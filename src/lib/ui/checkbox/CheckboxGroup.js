import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import { Checkbox, Grid } from 'semantic-ui-react';

import toggleItemInArray from 'lib/array/toggle-item-in-array';
import groupElements from 'lib/grid/group-elements';

export default class CheckboxGroup extends Component {
  static propTypes = {
    checkboxComponent: PropTypes.func.isRequired,
  };

  static defaultProps = {
    checkboxComponent: Checkbox,
  };

  /**
   * Smart checkbox event handler.
   *
   * @param {SyntheticEvent} event - cross-browser wrapper around the browserâ€™s native event.
   * @param {object?} [data] - data props generated by semantic-ui-react.
   */
  handleChange = (event, data = {}) => {
    const { onChange, value: oldValue } = this.props;
    const eventOrValue = this.calcEventOrValue(
      event,
      data,
      oldValue
    );

    !!onChange && onChange(eventOrValue, data);
  }

  calcEventOrValue = (event, data, oldValue) => {
    const {
      behavesLike,
      useDataProps,
    } = this.props;

    const value = useDataProps ? data.value : event.target.value;

    switch (behavesLike) {
      case 'checkbox':
        return toggleItemInArray(oldValue, value);

      case 'radio':
        return value;

      default:
        return event;
    }
  }

  calcWrapperComponent = (WrapperComponent) => {
    return this.props.columns ? WrapperComponent : Fragment;
  }

  calcValue = (optionValue, values) => {
    return Array.isArray(values) ? values.indexOf(optionValue) >= 0 : optionValue === values;
  }

  mapValueToId = (value) => {
    return [this.props.id, value].filter(value => value).join('-');
  }

  mapIdToOption = (option, index) => {
    return {
      ...option,
      id: this.mapValueToId(option.value),
    };
  }

  render() {
    const {
      behavesLike,
      className,
      columns,
      stretched,
      verticalAlign,
      textAlign,
      id,
      onChange,
      options,
      value,
      useDataProps,

      checkboxComponent: CheckboxComponent,

      ...props
    } = this.props;

    const optionMap = groupElements(options, columns || 1);

    const gridComponentProps = !!columns ? { columns, className, stretched, verticalAlign, textAlign } : {};

    // Render either <Grid.*> or <Fragment>.
    const GridComponent = this.calcWrapperComponent(Grid);
    const RowComponent = this.calcWrapperComponent(Grid.Row);
    const ColumnComponent = this.calcWrapperComponent(Grid.Column);

    return (
      <GridComponent {...gridComponentProps}>
        {Object.keys(optionMap).map((key) => (
          <RowComponent {...{key}}>
            {optionMap[key].map(this.mapIdToOption).map((option, index) => (
              <ColumnComponent key={option.id}>
                <CheckboxComponent
                  {...props}  // Includes the onChange() of the main component event hander.
                  {...option} // `option` can override props.onChange() if it wanted to.
                  onChange={this.handleChange}
                  checked={this.calcValue(option.value, value)}
                />
              </ColumnComponent>
            ))}
          </RowComponent>
        ))}
      </GridComponent>
    );
  }
}
